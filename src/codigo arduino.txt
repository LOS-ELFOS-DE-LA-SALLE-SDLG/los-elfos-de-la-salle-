#include <Servo.h>

// --- CONFIGURACIÓN DE PINES Y PARÁMETROS ---
// Pines del Driver L298N
#define ENA_PIN 5
#define IN1_PIN 6
#define IN2_PIN 7

// Pines de Sensores
#define TRIG_FRONT 26
#define ECHO_FRONT 27
#define TRIG_LEFT  24
#define ECHO_LEFT  25
#define TRIG_RIGHT 28
#define ECHO_RIGHT 29

// Pin del Servo
#define SERVO_PIN 9

// --- NUEVO: PIN PARA EL INTERRUPTOR DE ESTRATEGIA ---
#define STRATEGY_SWITCH_PIN 30 

// Parámetros de Control
#define VELOCIDAD_NORMAL 95
#define VELOCIDAD_GIRO   95
#define UMBRAL_FRONTAL   60
#define UMBRAL_LATERAL   20
#define KP_GIRO 2.8

// Tus valores de servo calibrado (IZQUIERDA CORREGIDO)
#define SERVO_CENTRO 90
#define SERVO_MAX_DER 140
#define SERVO_MAX_IZQ 30 // CORREGIDO: Debe ser menor que 90
// ------------------------------------------

Servo miServo;

// --- NUEVO: VARIABLE GLOBAL PARA LA ESTRATEGIA ---
int direccionEvasion; // Almacenará SERVO_MAX_IZQ o SERVO_MAX_DER

void setup() {
  Serial.begin(9600);
  miServo.attach(SERVO_PIN);
  
  pinMode(ENA_PIN, OUTPUT);
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(TRIG_FRONT, OUTPUT);
  pinMode(ECHO_FRONT, INPUT);
  pinMode(TRIG_LEFT, OUTPUT);
  pinMode(ECHO_LEFT, INPUT);
  pinMode(TRIG_RIGHT, OUTPUT);
  pinMode(ECHO_RIGHT, INPUT);

  // --- NUEVO: LEER EL INTERRUPTOR DE ESTRATEGIA ---
  pinMode(STRATEGY_SWITCH_PIN, INPUT_PULLUP); // Usamos la resistencia interna
  
  // Leemos el estado del interruptor al iniciar
  if (digitalRead(STRATEGY_SWITCH_PIN) == LOW) {
    direccionEvasion = SERVO_MAX_IZQ; // Si el switch está en LOW, girar a la izquierda
    Serial.println("Estrategia de Evasion: IZQUIERDA");
  } else {
    direccionEvasion = SERVO_MAX_DER; // Si está en HIGH, girar a la derecha
    Serial.println("Estrategia de Evasion: DERECHA");
  }
  
  // Secuencia de inicio
  miServo.write(SERVO_CENTRO);
  detenerMotor();
  delay(2000);
}

void loop() {
  // --- LECTURA DE SENSORES SECUENCIAL Y CON PAUSA ---
  int distFrontal = medirDistancia(TRIG_FRONT, ECHO_FRONT);
  delay(50); // Pausa para evitar interferencia entre sensores
  int distIzquierda = medirDistancia(TRIG_LEFT, ECHO_LEFT);
  delay(50); // Pausa para evitar interferencia entre sensores
  int distDerecha = medirDistancia(TRIG_RIGHT, ECHO_RIGHT);
  
  // 2. Variables para almacenar los cálculos del ciclo
  int anguloDeseado = SERVO_CENTRO;
  int velocidadDeseada = VELOCIDAD_NORMAL;

  // 3. Lógica de decisión
  if (distFrontal > 0 && distFrontal < UMBRAL_FRONTAL) {
    // --- MODO 1: EVASIÓN FRONTAL CON ESTRATEGIA ---
    velocidadDeseada = VELOCIDAD_GIRO;
    anguloDeseado = direccionEvasion; // Usa la dirección elegida al inicio

  } else {
    // --- MODO 2: NAVEGACIÓN LATERAL O RECTA ---
    if (distIzquierda < UMBRAL_LATERAL || distDerecha < UMBRAL_LATERAL) {
      // --- LÍNEA MODIFICADA ---
      // Reduce la velocidad AL 75% de la velocidad normal
      velocidadDeseada = VELOCIDAD_NORMAL * 0.75;
      
      if (distIzquierda < distDerecha) {
        int error = UMBRAL_LATERAL - distIzquierda;
        anguloDeseado = SERVO_CENTRO + (error * KP_GIRO);
      } else {
        int error = UMBRAL_LATERAL - distDerecha;
        anguloDeseado = SERVO_CENTRO - (error * KP_GIRO);
      }
    }
  }
  
  // 4. Aplicar los resultados finales al hardware
  anguloDeseado = constrain(anguloDeseado, SERVO_MAX_IZQ, SERVO_MAX_DER);
  miServo.write(anguloDeseado);
  avanzar(velocidadDeseada);
}


// --- Funciones de Control ---

void avanzar(int velocidad) {
  digitalWrite(IN1_PIN, HIGH);
  digitalWrite(IN2_PIN, LOW);
  analogWrite(ENA_PIN, velocidad);
}

void retroceder(int velocidad) {
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, HIGH);
  analogWrite(ENA_PIN, velocidad);
}

void frenar() {
  digitalWrite(IN1_PIN, HIGH);
  digitalWrite(IN2_PIN, HIGH);
  analogWrite(ENA_PIN, 255);
}

void detenerMotor() {
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, LOW);
  analogWrite(ENA_PIN, 0);
}

int medirDistancia(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duracion = pulseIn(echoPin, HIGH, 25000);
  return duracion * 0.034 / 2;
}